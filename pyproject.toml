[build-system]
requires = [
  "setuptools>=42",
  "wheel"
]
build-backend = "setuptools.build_meta"

[project]
name = "django_user_starter"
dynamic = ["version"]
description = "Minimal intelligent Django project generator - Create complete projects with one command"
readme = "README.md"
license = "MIT"
keywords = [
    "django",
    "generator",
    "starter",
    "scaffold",
    "api",
    "docker"
]
authors = [
  { name = "yaninsanity", email = "admin@jl-blog.com" }
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Code Generators",
  "Framework :: Django",
  "Framework :: Django :: 4.2",
  "Framework :: Django :: 5.0",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = []
requires-python = ">=3.9"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "black>=23.0.0",
    "isort>=5.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "bandit[toml]>=1.7.0",
    "pydocstyle[toml]>=6.3.0",
    "pre-commit>=3.0.0",
    "commitizen>=3.0.0",
    "python-semantic-release>=9.0.0",
    "build>=1.0.0",
    "twine>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/yaninsanity/django-user-starter"
Documentation = "https://django-user-starter.readthedocs.io/"
Repository = "https://github.com/yaninsanity/django-user-starter.git"
Issues = "https://github.com/yaninsanity/django-user-starter/issues"
Changelog = "https://github.com/yaninsanity/django-user-starter/blob/main/CHANGELOG.md"

[project.scripts]
django-starter = "django_user_starter.main:main"

[tool.setuptools]
packages = ["django_user_starter"]

[tool.setuptools.dynamic]
version = {attr = "django_user_starter.__version__"}

# Code formatting configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
    | \.mypy_cache
    | \.tox
    | \.venv
    | build
    | dist
)/
'''

# Import sorting configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# Type checking configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Security analysis configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

# Documentation style configuration
[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D104"]

# Test configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=django_user_starter",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=50",
    "-ra"
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

# Coverage configuration
[tool.coverage.run]
source = ["django_user_starter"]
omit = [
    "tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
    "*/__pycache__/*"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
skip_covered = false
precision = 2

# Semantic versioning configuration
[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "pep440"
version_provider = "pep621"
update_changelog_on_bump = true
major_version_zero = false

# Semantic Release Configuration
[tool.semantic_release]
version_toml = ["pyproject.toml:project.version", "django_user_starter/_version.py:__version__"]
version_variables = ["django_user_starter/_version.py:__version__"]
build_command = "python -m build"
upload_to_vcs_release = true
vcs_release = true
tag_format = "v{version}"

# Version pattern for semantic release
major_on_zero = true
allow_zero_version = true

# Changelog configuration
changelog_file = "CHANGELOG.md"
changelog_placeholder = "## Unreleased"

# Commit message parsing (conventional commits)
commit_parser = "conventional"
commit_parser_options = { allowed_tags = [
    "build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"
], minor_tags = ["feat"], patch_tags = ["fix", "perf"] }

# Branch configuration - release from main, develop for pre-releases
branches = { main = { match = "main", prerelease = false }, develop = { match = "develop", prerelease = true, prerelease_token = "dev" } }

# Upload configuration
upload_to_repository = true
repository_url = "https://upload.pypi.org/legacy/"
