name: Publish Python 🐍 distribution 📦 to PyPI and TestPyPI

on:
  push:
    # Trigger on any push to "main" or "dev" branches.
    branches:
      - main
      - dev
    # Also trigger when a version tag is pushed (if you use tags for releases).
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  id-token: write

jobs:
  # ─────────────────────────────────────────────────────────────────────────────
  # BUILD JOB: Build the package and generate a version using setuptools_scm.
  # This job uploads the built distributions as an artifact.
  build:
    name: Build Distribution Package
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full Git history (and tags) for accurate versioning

      - name: Set up Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Build Dependencies
        run: |
          pip install --upgrade build setuptools_scm

      - name: Generate Version from Git Tags
        id: get_version
        run: |
          # Let setuptools_scm determine the version.
          # With proper configuration in your project (e.g. via pyproject.toml),
          # non-main commits will have a .dev suffix (snapshot), while main commits produce a clean version.
          VERSION=$(python -c "import setuptools_scm; print(setuptools_scm.get_version())")
          echo "Computed version: ${VERSION}"
          # Write the computed version to the step output and environment variable.
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Build the Package
        run: |
          python -m build
          # The built distributions will be located in the dist/ folder

      - name: Upload Distribution Artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  # ─────────────────────────────────────────────────────────────────────────────
  # PUBLISH JOB (Snapshot): Publish snapshot (development) builds to TestPyPI.
  publish_snapshot:
    name: Publish Snapshot to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    permissions:
      id-token: write
    steps:
      - name: Download Distribution Artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  # ─────────────────────────────────────────────────────────────────────────────
  # PUBLISH JOB (Official): Publish official releases to PyPI.
  publish_official:
    name: Publish Official Release to PyPI
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write
    steps:
      - name: Download Distribution Artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://pypi.org/legacy/
