name: Publish Python 🐍 Distribution 📦 to PyPI and TestPyPI

on:
  push:
    # Trigger on any push to main or dev branches, as well as on version tag pushes.
    branches:
      - main
      - dev
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  id-token: write

jobs:
  # BUILD JOB: Build the package and generate a version using setuptools_scm.
  # This job uploads the built distributions as an artifact.
  build:
    name: Build Distribution Package
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full Git history (and tags) for accurate versioning

      - name: Set up Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Build Dependencies
        run: |
          pip install --upgrade build setuptools_scm

      - name: Generate Version from Git Tags
        id: get_version
        run: |
          # Generate the version automatically using setuptools_scm.
          # On non-main commits (e.g., dev branch), this will produce a snapshot version
          # (e.g. 0.1.0.dev123+gabcdef), while on a tagged commit, it will produce a clean version (e.g. 1.0.0).
          VERSION=$(python -c "import setuptools_scm; print(setuptools_scm.get_version())")
          echo "Computed version: ${VERSION}"
          # Save the computed version as a step output and an environment variable.
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Build the Package
        run: |
          python -m build
          # The built distributions will be located in the dist/ folder.

      - name: Upload Distribution Artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  # PUBLISH SNAPSHOT JOB: Publish snapshot builds to TestPyPI (for dev branch).
  publish_snapshot:
    name: Publish Snapshot to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    permissions:
      id-token: write
    steps:
      - name: Download Distribution Artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  # PUBLISH OFFICIAL JOB: Publish official releases to PyPI.
  publish_official:
    name: Publish Official Release to PyPI
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      id-token: write
    steps:
      - name: Download Distribution Artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://pypi.org/legacy/

  # GITHUB RELEASE JOB: Sign the distributions with Sigstore and create a GitHub Release.
  github_release:
    name: Sign Distributions and Create GitHub Release
    needs: publish_official
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating GitHub Releases.
      id-token: write  # Required for Sigstore signing.
    steps:
      - name: Download Distribution Artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Sign the Distributions with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: |
            ./dist/*.tar.gz
            ./dist/*.whl

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          # Create a GitHub Release using the tag name (e.g., v1.0.0).
          gh release create "$GITHUB_REF_NAME" --repo "$GITHUB_REPOSITORY" --notes "Release $GITHUB_REF_NAME"

      - name: Upload Signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          # Upload all files from the dist/ folder (including signatures) to the 
